# Use PyTorch base image
FROM pytorch/pytorch:2.1.1-cuda12.1-cudnn8-runtime

# Accept CLIENT_ID as build argument
ARG CLIENT_ID
ENV CLIENT_ID=${CLIENT_ID}

# Set environment variables
ENV PYTHONPATH=/app
ENV CUDA_VISIBLE_DEVICES=0
ENV TORCH_USE_CUDA_DSA=1
ENV CUDA_LAUNCH_BLOCKING=1
ENV RELOAD=true
ENV IS_SERVER=false
# Set non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# Create necessary directories
RUN mkdir -p /app/api /app/models /app/logs /app/data /app/cache /app/database

# Set working directory
WORKDIR /app

# Copy only requirements first to leverage Docker cache
COPY api/requirements.txt requirements.txt

# Install Python dependencies (excluding PyTorch as it's in base image)
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY api/ /app/api/

# Create required directories first
RUN mkdir -p /app/data/partitioned /app/cache/torch /app/logs

# Copy client-specific database
COPY database/${CLIENT_ID}.db /app/database/facial_reg.db

# Copy client-specific model files
COPY models/${CLIENT_ID}_model.pth /app/models/${CLIENT_ID}_model.pth
COPY models/best_pretrained_model.pth /app/models/best_pretrained_model.pth

# Copy only client-specific data
COPY data/partitioned/${CLIENT_ID} /app/data/partitioned/${CLIENT_ID}
COPY data/identity_mapping.json /app/data/

# Start the application
CMD ["uvicorn", "api.src.main:app", "--host", "0.0.0.0", "--port", "8080", "--reload"] 