version: '3.8'

services:
  # Main Biometric API
  biometric-api:
    build: .
    container_name: biometric-api
    ports:
      - "8000:8000"
    volumes:
      - ./data/partitioned/server:/app/data
      - D:/models:/app/models
      - D:/cache:/app/cache
      - D:/logs:/app/logs
      - ./best_server_pretrained_model.pth:/app/models/pretrained_model.pth
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - PRETRAINED_MODEL_PATH=/app/models/pretrained_model.pth
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 1g
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - redis
      - federated-coordinator

  # Federated Learning Coordinator
  federated-coordinator:
    build: .
    container_name: federated-coordinator
    command: python3.11 -m federated.coordinator
    ports:
      - "8001:8001"
    volumes:
      - ./data/partitioned/server:/app/data
      - D:/models:/app/models
      - D:/logs:/app/logs
      - ./best_pretrained_model.pth:/app/models/global_pretrained_model.pth
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - PRETRAINED_MODEL_PATH=/app/models/global_pretrained_model.pth
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 800m
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - redis

  # Federated Client 1
  federated-client1:
    build: .
    container_name: federated-client1
    command: python3.11 -m federated.client --client-id client1 --coordinator-url http://federated-coordinator:8001 --data-path /app/data --client-type mobile
    volumes:
      - ./data/partitioned/client1:/app/data
      - D:/models:/app/models
      - D:/logs:/app/logs
      - ./best_client1_pretrained_model.pth:/app/models/client_pretrained_model.pth
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - PRETRAINED_MODEL_PATH=/app/models/client_pretrained_model.pth
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 600m
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - federated-coordinator

  # Federated Client 2
  federated-client2:
    build: .
    container_name: federated-client2
    command: python3.11 -m federated.client --client-id client2 --coordinator-url http://federated-coordinator:8001 --data-path /app/data --client-type mobile
    volumes:
      - ./data/partitioned/client2:/app/data
      - D:/models:/app/models
      - D:/logs:/app/logs
      - ./best_client2_pretrained_model.pth:/app/models/client_pretrained_model.pth
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - PRETRAINED_MODEL_PATH=/app/models/client_pretrained_model.pth
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 600m
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - federated-coordinator

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: biometric-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - D:/logs:/var/log/nginx
    mem_limit: 128m
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - biometric-api
      - federated-coordinator

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: biometric-redis
    ports:
      - "6379:6379"
    volumes:
      - D:/data/redis:/data
    command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru --save 60 1000
    mem_limit: 256m
    restart: unless-stopped
    networks:
      - biometric-net

  # SQLite Web Admin
  sqlite-web:
    image: coleifer/sqlite-web
    container_name: biometric-sqlite-web
    ports:
      - "8080:8080"
    volumes:
      - D:/data:/data
    command: sqlite_web -H 0.0.0.0 -x /data/biometric.db
    mem_limit: 128m
    restart: unless-stopped
    networks:
      - biometric-net

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: biometric-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - D:/data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    mem_limit: 512m
    restart: unless-stopped
    networks:
      - biometric-net

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: biometric-grafana
    ports:
      - "3000:3000"
    volumes:
      - D:/data/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    mem_limit: 256m
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - prometheus

networks:
  biometric-net:
    driver: bridge

volumes:
  biometric_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/data
  
  biometric_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/models 