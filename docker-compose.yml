version: '3.8'

services:
  # Federated Learning Coordinator
  fl-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.coordinator
    container_name: fl-coordinator
    ports:
      - "9000:8000"
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - MODEL_PATH=/app/models/server_model.pth
      - DATABASE_URL=sqlite:////app/database/federated.db
      - JWT_SECRET=coordinator-secret-key
      - NODE_TYPE=coordinator
      - FEDERATED_ROUNDS=10
      - LOG_LEVEL=INFO
      - ENABLE_DP=true
      - MAX_DP_EPSILON=100.0
      - DP_DELTA=1e-5
      - DP_NOISE_MULTIPLIER=0.2
      - DP_MAX_GRAD_NORM=5.0
      - IS_SERVER=true
      - NUM_IDENTITIES=100
    command: uvicorn api.src.coordinator:app --host 0.0.0.0 --reload
    restart: unless-stopped
    networks:
      - biometric-net

  # Client 1 Biometric API Service
  client1-api:
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        - CLIENT_ID=client1
    container_name: client1-biometric-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - MODEL_PATH=/app/models/client1_model.pth
      - DATABASE_URL=sqlite:////app/database/facial_reg.db
      - JWT_SECRET=your-secret-key
      - RATE_LIMIT_AUTH=5
      - RATE_LIMIT_DEFAULT=10
      - MAX_WORKERS=1
      - LOG_LEVEL=DEBUG
      - ENABLE_DP=true
      - MAX_DP_EPSILON=100.0
      - DP_DELTA=1e-5
      - DP_NOISE_MULTIPLIER=0.2
      - DP_MAX_GRAD_NORM=5.0
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_USE_CUDA_DSA=1
      - CUDA_LAUNCH_BLOCKING=1
      - RELOAD=true
      - NODE_TYPE=client
      - CLIENT_ID=client1
      - COORDINATOR_URL=http://fl-coordinator:8000
      - IS_SERVER=false
      - SERVER_URL=http://fl-coordinator:8000
      - NUM_IDENTITIES=300
    command: uvicorn api.src.app:app --host 0.0.0.0 --reload
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 4g
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - fl-coordinator

  # Client 2 Biometric API Service
  client2-api:
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        - CLIENT_ID=client2
    container_name: client2-biometric-api
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - TORCH_HOME=/app/cache/torch
      - NVIDIA_VISIBLE_DEVICES=all
      - MODEL_PATH=/app/models/client2_model.pth
      - DATABASE_URL=sqlite:////app/database/facial_reg.db
      - JWT_SECRET=your-secret-key-client2
      - RATE_LIMIT_AUTH=5
      - RATE_LIMIT_DEFAULT=10
      - MAX_WORKERS=1
      - LOG_LEVEL=INFO
      - ENABLE_DP=true
      - MAX_DP_EPSILON=100.0
      - DP_DELTA=1e-5
      - DP_NOISE_MULTIPLIER=0.2
      - DP_MAX_GRAD_NORM=5.0
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_USE_CUDA_DSA=1
      - CUDA_LAUNCH_BLOCKING=1
      - RELOAD=true
      - NODE_TYPE=client
      - CLIENT_ID=client2
      - COORDINATOR_URL=http://fl-coordinator:8000
      - IS_SERVER=false
      - SERVER_URL=http://fl-coordinator:8000
      - NUM_IDENTITIES=300
    command: uvicorn api.src.app:app --host 0.0.0.0 --reload
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    mem_limit: 4g
    restart: unless-stopped
    networks:
      - biometric-net
    depends_on:
      - fl-coordinator

  # Emotion Analysis API Service
  emotion-api:
    build:
      context: ./emo-api
      dockerfile: Dockerfile
    container_name: emotion-api
    ports:
      - "1236:8080"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_PATH=/app/model.pth
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - biometric-net

networks:
  biometric-net:
    driver: bridge

volumes:
  biometric_cache:
    driver: local
  biometric_logs:
    driver: local
  